package main

import (
	"fmt"
	"html/template"
	"log"
	"io"
	"net/http"
)

type AutoGenerated struct {
	Page         int    `json:"page"`
	TotalPages   int    `json:"totalPages"`
	TotalResults int    `json:"totalResults"`
	Type         string `json:"type"`
	Count        int    `json:"count"`
	Items        []struct {
		CommonName string `json:"commonName"`
		FirstName  string `json:"firstName"`
		LastName   string `json:"lastName"`
		League     struct {
			ImageUrls struct {
				Dark  string `json:"dark"`
				Light string `json:"light"`
			} `json:"imageUrls"`
			AbbrName string      `json:"abbrName"`
			ID       int         `json:"id"`
			ImgURL   interface{} `json:"imgUrl"`
			Name     string      `json:"name"`
		} `json:"league"`
		Nation struct {
			ImageUrls struct {
				Small  string `json:"small"`
				Medium string `json:"medium"`
				Large  string `json:"large"`
			} `json:"imageUrls"`
			AbbrName string      `json:"abbrName"`
			ID       int         `json:"id"`
			ImgURL   interface{} `json:"imgUrl"`
			Name     string      `json:"name"`
		} `json:"nation"`
		Club struct {
			ImageUrls struct {
				Dark struct {
					Small  string `json:"small"`
					Medium string `json:"medium"`
					Large  string `json:"large"`
				} `json:"dark"`
				Light struct {
					Small  string `json:"small"`
					Medium string `json:"medium"`
					Large  string `json:"large"`
				} `json:"light"`
			} `json:"imageUrls"`
			AbbrName string      `json:"abbrName"`
			ID       int         `json:"id"`
			ImgURL   interface{} `json:"imgUrl"`
			Name     string      `json:"name"`
		} `json:"club"`
		Headshot struct {
			ImgURL            string `json:"imgUrl"`
			IsDynamicPortrait bool   `json:"isDynamicPortrait"`
		} `json:"headshot"`
		Position         string      `json:"position"`
		Composure        int         `json:"composure"`
		PlayStyle        string      `json:"playStyle"`
		PlayStyleID      interface{} `json:"playStyleId"`
		Height           int         `json:"height"`
		Weight           int         `json:"weight"`
		Birthdate        string      `json:"birthdate"`
		Age              int         `json:"age"`
		Acceleration     int         `json:"acceleration"`
		Aggression       int         `json:"aggression"`
		Agility          int         `json:"agility"`
		Balance          int         `json:"balance"`
		Ballcontrol      int         `json:"ballcontrol"`
		Foot             string      `json:"foot"`
		SkillMoves       int         `json:"skillMoves"`
		Crossing         int         `json:"crossing"`
		Curve            int         `json:"curve"`
		Dribbling        int         `json:"dribbling"`
		Finishing        int         `json:"finishing"`
		Freekickaccuracy int         `json:"freekickaccuracy"`
		Gkdiving         int         `json:"gkdiving"`
		Gkhandling       int         `json:"gkhandling"`
		Gkkicking        int         `json:"gkkicking"`
		Gkpositioning    int         `json:"gkpositioning"`
		Gkreflexes       int         `json:"gkreflexes"`
		Headingaccuracy  int         `json:"headingaccuracy"`
		Interceptions    int         `json:"interceptions"`
		Jumping          int         `json:"jumping"`
		Longpassing      int         `json:"longpassing"`
		Longshots        int         `json:"longshots"`
		Marking          int         `json:"marking"`
		Penalties        int         `json:"penalties"`
		Positioning      int         `json:"positioning"`
		Potential        int         `json:"potential"`
		Reactions        int         `json:"reactions"`
		Shortpassing     int         `json:"shortpassing"`
		Shotpower        int         `json:"shotpower"`
		Slidingtackle    int         `json:"slidingtackle"`
		Sprintspeed      int         `json:"sprintspeed"`
		Standingtackle   int         `json:"standingtackle"`
		Stamina          int         `json:"stamina"`
		Strength         int         `json:"strength"`
		Vision           int         `json:"vision"`
		Volleys          int         `json:"volleys"`
		WeakFoot         int         `json:"weakFoot"`
		Traits           []string    `json:"traits"`
		Specialities     []string    `json:"specialities"`
		AtkWorkRate      string      `json:"atkWorkRate"`
		DefWorkRate      string      `json:"defWorkRate"`
		PlayerType       interface{} `json:"playerType"`
		Attributes       []struct {
			Name           string `json:"name"`
			Value          int    `json:"value"`
			ChemistryBonus []int  `json:"chemistryBonus"`
		} `json:"attributes"`
		Name                       string      `json:"name"`
		RarityID                   int         `json:"rarityId"`
		IsIcon                     bool        `json:"isIcon"`
		Quality                    string      `json:"quality"`
		IsGK                       bool        `json:"isGK"`
		PositionFull               string      `json:"positionFull"`
		IsSpecialType              bool        `json:"isSpecialType"`
		Contracts                  interface{} `json:"contracts"`
		Fitness                    interface{} `json:"fitness"`
		RawAttributeChemistryBonus interface{} `json:"rawAttributeChemistryBonus"`
		IsLoan                     interface{} `json:"isLoan"`
		SquadPosition              interface{} `json:"squadPosition"`
		IconAttributes             interface{} `json:"iconAttributes"`
		ItemType                   string      `json:"itemType"`
		DiscardValue               interface{} `json:"discardValue"`
		ID                         string      `json:"id"`
		ModelName                  string      `json:"modelName"`
		BaseID                     int         `json:"baseId"`
		Rating                     int         `json:"rating"`
	} `json:"items"`
}

var templates = template.Must(template.ParseFiles("test.html"))

func main() {
	http.HandleFunc("/home", homeHandler)
	http.ListenAndServe(":9999", nil)
}

func homeHandler(w http.ResponseWriter, r *http.Request) {
	resp, err := http.Get("https://www.easports.com/fifa/ultimate-team/api/fut/item")
	if err != nil {
		log.Fatalln(err)
	}

	b, err := io.ReadAll(resp.Body)
	// b, err := ioutil.ReadAll(resp.Body)  Go.1.15 and earlier
	if err != nil {
		log.Fatalln(err)
	}

	w.Write([]byte(b))
	fmt.Println(resp.Body)

}
